:mod:`vqa_benchmarking_backend.datasets.GQADataset`
===================================================

.. py:module:: vqa_benchmarking_backend.datasets.GQADataset


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   vqa_benchmarking_backend.datasets.GQADataset.GQADataSample
   vqa_benchmarking_backend.datasets.GQADataset.GQADataset



Functions
~~~~~~~~~

.. autoapisummary::

   vqa_benchmarking_backend.datasets.GQADataset.preprocess_question
   vqa_benchmarking_backend.datasets.GQADataset.load_img
   vqa_benchmarking_backend.datasets.GQADataset.load_img_feats



.. function:: preprocess_question(question: str) -> List[str]


.. function:: load_img(path: str, transform=None) -> numpy.ndarray


.. function:: load_img_feats(path: str) -> torch.FloatTensor


.. class:: GQADataSample(question_id: str, question: str, answers: Dict[str, float], image_id: str, image_path: str, image_feat_path: str, image_transform=None)


   Bases: :py:obj:`vqa_benchmarking_backend.datasets.dataset.DataSample`

   .. method:: image(self) -> numpy.ndarray
      :property:


   .. method:: question_tokenized(self) -> List[str]
      :property:


   .. method:: __str__(self)

      Return str(self).



.. class:: GQADataset(question_file: str, img_dir, img_feat_dir, idx2ans, name, transform=None, load_img_features=False)


   Bases: :py:obj:`vqa_benchmarking_backend.datasets.dataset.DiagnosticDataset`

   .. method:: _load_data(self, question_file: str) -> Tuple[List[vqa_benchmarking_backend.datasets.dataset.DataSample], Dict[str, vqa_benchmarking_backend.datasets.dataset.DataSample], vqa_benchmarking_backend.utils.vocab.Vocabulary, vqa_benchmarking_backend.utils.vocab.Vocabulary]


   .. method:: __getitem__(self, index) -> vqa_benchmarking_backend.datasets.dataset.DataSample


   .. method:: label_from_class(self, class_index: int) -> str


   .. method:: word_in_vocab(self, word: str) -> bool


   .. method:: __len__(self)


   .. method:: get_name(self) -> str


   .. method:: index_to_question_id(self, index) -> str


   .. method:: class_idx_to_answer(self, class_idx: int) -> Union[str, None]



