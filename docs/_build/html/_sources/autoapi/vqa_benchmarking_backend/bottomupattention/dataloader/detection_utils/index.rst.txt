:mod:`vqa_benchmarking_backend.bottomupattention.dataloader.detection_utils`
============================================================================

.. py:module:: vqa_benchmarking_backend.bottomupattention.dataloader.detection_utils

.. autoapi-nested-parse::

   Common data processing utilities that are used in a
   typical object detection data pipeline.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   vqa_benchmarking_backend.bottomupattention.dataloader.detection_utils.transform_instance_annotations
   vqa_benchmarking_backend.bottomupattention.dataloader.detection_utils.annotations_to_instances



.. function:: transform_instance_annotations(annotation, transforms, image_size, *, keypoint_hflip_indices=None)

   Apply transforms to box, segmentation and keypoints annotations of a single instance.

   It will use `transforms.apply_box` for the box, and
   `transforms.apply_coords` for segmentation polygons & keypoints.
   If you need anything more specially designed for each data structure,
   you'll need to implement your own version of this function or the transforms.

   Args:
       annotation (dict): dict of instance annotations for a single instance.
           It will be modified in-place.
       transforms (TransformList):
       image_size (tuple): the height, width of the transformed image
       keypoint_hflip_indices (ndarray[int]): see `create_keypoint_hflip_indices`.

   Returns:
       dict:
           the same input dict with fields "bbox", "segmentation", "keypoints"
           transformed according to `transforms`.
           The "bbox_mode" field will be set to XYXY_ABS.


.. function:: annotations_to_instances(annos, image_size, mask_format='polygon')

   Create an :class:`Instances` object used by the models,
   from instance annotations in the dataset dict.

   Args:
       annos (list[dict]): a list of instance annotations in one image, each
           element for one instance.
       image_size (tuple): height, width

   Returns:
       Instances:
           It will contain fields "gt_boxes", "gt_classes",
           "gt_masks", "gt_keypoints", if they can be obtained from `annos`.
           This is the format that builtin models expect.


