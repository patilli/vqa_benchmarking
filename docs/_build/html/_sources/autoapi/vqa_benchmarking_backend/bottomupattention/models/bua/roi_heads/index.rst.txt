:mod:`vqa_benchmarking_backend.bottomupattention.models.bua.roi_heads`
======================================================================

.. py:module:: vqa_benchmarking_backend.bottomupattention.models.bua.roi_heads


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   vqa_benchmarking_backend.bottomupattention.models.bua.roi_heads.BUACaffeRes5ROIHeads
   vqa_benchmarking_backend.bottomupattention.models.bua.roi_heads.BUADetectron2Res5ROIHeads



Functions
~~~~~~~~~

.. autoapisummary::

   vqa_benchmarking_backend.bottomupattention.models.bua.roi_heads.make_stage



.. function:: make_stage(block_class, num_blocks, first_stride, **kwargs)

   Create a resnet stage by creating many blocks.
   Args:
       block_class (class): a subclass of ResNetBlockBase
       num_blocks (int):
       first_stride (int): the stride of the first block. The other blocks will have stride=1.
           A `stride` argument will be passed to the block constructor.
       kwargs: other arguments passed to the block constructor.

   Returns:
       list[nn.Module]: a list of block module.


.. class:: BUACaffeRes5ROIHeads(cfg, input_shape)


   Bases: :py:obj:`detectron2.modeling.ROIHeads`

   The ROIHeads in a typical "C4" R-CNN model, where
   the box and mask head share the cropping and
   the per-region feature computation by a Res5 block.

   .. method:: _build_res5_block(self, cfg)


   .. method:: _shared_roi_transform(self, features, boxes)


   .. method:: forward(self, images, features, proposals, targets=None)

      See :class:`ROIHeads.forward`.



.. class:: BUADetectron2Res5ROIHeads(cfg, input_shape)


   Bases: :py:obj:`detectron2.modeling.ROIHeads`

   The ROIHeads in a typical "C4" R-CNN model, where
   the box and mask head share the cropping and
   the per-region feature computation by a Res5 block.

   .. method:: _sample_proposals(self, matched_idxs, matched_labels, gt_classes, gt_attributes)

      Based on the matching between N proposals and M groundtruth,
      sample the proposals and set their classification labels.

      Args:
          matched_idxs (Tensor): a vector of length N, each is the best-matched
              gt index in [0, M) for each proposal.
          matched_labels (Tensor): a vector of length N, the matcher's label
              (one of cfg.MODEL.ROI_HEADS.IOU_LABELS) for each proposal.
          gt_classes (Tensor): a vector of length M.

      Returns:
          Tensor: a vector of indices of sampled proposals. Each is in [0, N).
          Tensor: a vector of the same length, the classification label for
              each sampled proposal. Each sample is labeled as either a category in
              [0, num_classes) or the background (num_classes).


   .. method:: _build_res5_block(self, cfg)


   .. method:: _shared_roi_transform(self, features, boxes)


   .. method:: label_and_sample_proposals(self, proposals, targets)

      Prepare some proposals to be used to train the ROI heads.
      It performs box matching between `proposals` and `targets`, and assigns
      training labels to the proposals.
      It returns ``self.batch_size_per_image`` random samples from proposals and groundtruth
      boxes, with a fraction of positives that is no larger than
      ``self.positive_sample_fraction``.

      Args:
          See :meth:`ROIHeads.forward`

      Returns:
          list[Instances]:
              length `N` list of `Instances`s containing the proposals
              sampled for training. Each `Instances` has the following fields:

              - proposal_boxes: the proposal boxes
              - gt_boxes: the ground-truth box that the proposal is assigned to
                (this is only meaningful if the proposal has a label > 0; if label = 0
                then the ground-truth box is random)

              Other fields such as "gt_classes", "gt_masks", that's included in `targets`.


   .. method:: forward(self, images, features, proposals, targets=None)

      See :class:`ROIHeads.forward`.



