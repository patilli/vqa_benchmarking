:mod:`vqa_benchmarking_backend.models.ban.ban`
==============================================

.. py:module:: vqa_benchmarking_backend.models.ban.ban


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   vqa_benchmarking_backend.models.ban.ban.MLP
   vqa_benchmarking_backend.models.ban.ban.BC
   vqa_benchmarking_backend.models.ban.ban.BiAttention
   vqa_benchmarking_backend.models.ban.ban.BAN




.. class:: MLP(dims, act='ReLU', dropout_r=0.0)


   Bases: :py:obj:`torch.nn.Module`

   Simple class for non-linear fully connect network

   .. method:: forward(self, x)



.. class:: BC(__C, atten=False)


   Bases: :py:obj:`torch.nn.Module`

   Simple class for non-linear bilinear connect network

   .. method:: forward(self, v, q)


   .. method:: forward_with_weights(self, v, q, w)



.. class:: BiAttention(__C)


   Bases: :py:obj:`torch.nn.Module`

   .. method:: forward(self, v, q, v_mask=True, logit=False, mask_with=-float('inf'))



.. class:: BAN(__C)


   Bases: :py:obj:`torch.nn.Module`

   .. method:: forward(self, q, v)



