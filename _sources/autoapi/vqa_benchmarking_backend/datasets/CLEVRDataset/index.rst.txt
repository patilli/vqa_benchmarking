:mod:`vqa_benchmarking_backend.datasets.CLEVRDataset`
=====================================================

.. py:module:: vqa_benchmarking_backend.datasets.CLEVRDataset


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   vqa_benchmarking_backend.datasets.CLEVRDataset.CLEVRDataSample
   vqa_benchmarking_backend.datasets.CLEVRDataset.CLEVRDataset



Functions
~~~~~~~~~

.. autoapisummary::

   vqa_benchmarking_backend.datasets.CLEVRDataset.preprocess_question
   vqa_benchmarking_backend.datasets.CLEVRDataset.load_img
   vqa_benchmarking_backend.datasets.CLEVRDataset.load_img_feats



.. function:: preprocess_question(question: str) -> List[str]

   Remove punctuation and make everything lower case


.. function:: load_img(path: str, transform=None) -> numpy.ndarray

   Load an image using module ``cv2``


.. function:: load_img_feats(path: str) -> torch.FloatTensor

   Load a numpy array containing image features


.. class:: CLEVRDataSample(question_id: str, question: str, answers: Dict[str, float], image_id: str, image_path: str, image_feat_path: str, image_transform=None)


   Bases: :py:obj:`vqa_benchmarking_backend.datasets.dataset.DataSample`

   Class describing one data sample of the CLEVR dataset
   Inheriting from ``DataSample``

   .. method:: image(self) -> numpy.ndarray
      :property:

      Returns the image, if not present it loads it from ``self._image_path``


   .. method:: question_tokenized(self) -> List[str]
      :property:

      Returns tokenized question


   .. method:: question(self) -> str
      :property:

      Returns full question


   .. method:: __str__(self)

      Stringify object


   .. method:: question_token_ids(self, vocab: vqa_benchmarking_backend.utils.vocab.Vocabulary) -> torch.LongTensor



.. class:: CLEVRDataset(question_file: str, img_dir, img_feat_dir, idx2ans, transform=None, load_img_features=False, dataset_fraction: float = 0.05, random_seed: int = 12345)


   Bases: :py:obj:`vqa_benchmarking_backend.datasets.dataset.DiagnosticDataset`

   Class describing the CLEVR dataset
   Inheriting from ``DiagnosticDataset``

   .. method:: _load_data(self, question_file: str, dataset_fraction, random_seed) -> Tuple[List[vqa_benchmarking_backend.datasets.dataset.DataSample], Dict[str, vqa_benchmarking_backend.datasets.dataset.DataSample], vqa_benchmarking_backend.utils.vocab.Vocabulary, vqa_benchmarking_backend.utils.vocab.Vocabulary]

      Loads data from CLEVR json files
      Returns:
          * data: list of ``CLEVRDataSample``
          * qid_to_sample: mapping of question id to data sample
          * question_vocab: ``Vocabulary`` of all unique words occuring in the data
          * answer_vocab: ``Vocabulary`` of all unique answers


   .. method:: __getitem__(self, index) -> vqa_benchmarking_backend.datasets.dataset.DataSample

      Returns a data sample


   .. method:: label_from_class(self, class_index: int) -> str

      Get the answer string of a given class index


   .. method:: word_in_vocab(self, word: str) -> bool

      Checks if a word occured inside the ``Vocabulary`` dervied of all questions


   .. method:: get_name(self) -> str

      Returns the name of the dataset, required for file caching


   .. method:: __len__(self)

      Returns the length of the CLEVRDataset as in self.data


   .. method:: index_to_question_id(self, index) -> str

      Get the index of a specific question id


   .. method:: class_idx_to_answer(self, class_idx: int) -> Union[str, None]

      Get the answer string for a given class index from the ``self.idx2ans`` dictionary



